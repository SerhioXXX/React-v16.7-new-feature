// Core
import React, { memo, useState } from 'react';
import { render } from 'react-dom';

// Hooks
import { useStopWatch, useRandomColor } from './hooks';

/**
 * memo ‚Äî –∞–Ω–∞–ª–æ–≥ –º–µ—Ç–æ–¥–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ shouldComponentUpdate,
 * —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
 */
const Title = memo((props) => {
    const color = useRandomColor();

    return <h1 style = {{ color }}>–°—á—ë—Ç—á–∏–∫: {props.count}</h1>;
});

const Parent = memo(() => {
    const [ count, setCount ] = useState(0);
    const { lapse, clear, isRunning, toggleRun } = useStopWatch();

    const _increment = () => setCount((prevCount) => prevCount + 1);
    const _reset = () => setCount(0);
    const _decrement = () => setCount((prevCount) => prevCount - 1);

    const buttonText = isRunning ? 'üèÅ –°—Ç–æ–ø' : 'üé¨ –°—Ç–∞—Ä—Ç';

    return (
        <section className = 'example'>
            <Title count = { count } />
            <div>
                <button onClick = { _increment }>+</button>
                <button onClick = { _reset }>–û–±–Ω—É–ª–∏—Ç—å</button>
                <button onClick = { _decrement }>-</button>
            </div>
            <section className = 'stopwatch'>
                <code>{lapse} –º—Å</code>
                <button onClick = { toggleRun }>{buttonText}</button>
                <button onClick = { clear }>–û—á–∏—Å—Ç–∏—Ç—å</button>
            </section>
        </section>
    );
});

render(<Parent />, document.getElementById('app'));
